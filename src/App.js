import React, {useEffect, useState} from 'react';
import { useTranslation } from 'react-i18next';
import movieService from './services/movieService';
import Header from './components/Header';
import MovieRow from './components/MovieRow';
import FeaturedMovie from './components/FeaturedMovie';
import './App.css';
import loading from './assets/loading.gif';

export default () => {
  console.log(process.env.API_BASE);
	console.log(process.env.API_BASE);
  const {t, i18n} = useTranslation();
  const [movieList, setMovieList] = useState([]);
  const [featuredData, setFeaturedData] = useState(null);
  const [blackHeader, setBlackHeader] = useState(false);
	const [language, setLanguage] = useState('en'); 

  const languages = [
    { label: t('English'), value: 'en' },
		{ label: t('Portuguese'), value: 'pt-BR' },
		{ label: t('Spanish'), value: 'es' },
	];

	const handleLanguageChange = (event) => {
		setLanguage(event.target.value);
	};

  useEffect(() => {
    const loadAll = async () => {
      i18n.changeLanguage(language);
      setMovieList([]);
      //get all movies
      let list = await movieService.getHomeList(language);
      setMovieList(list);

      //get featured movie
      let originals = list.filter(i => i.slug === 'originals');
      const randomMatch = Math.floor(Math.random() * (originals[0].items.results.length - 1));
      let chosen = originals[0].items.results[randomMatch];
      let chosenInfo = await movieService.getMovieInfo(chosen.id, 'tv', language);
      setFeaturedData(chosenInfo);
    };
    loadAll();
  }, [language]);

  //monitoring scroll
  useEffect(() => {
    const scrollListener = () => {
      if(window.scrollY > 10) {
        setBlackHeader(true);
      } else {
        setBlackHeader(false);
      }
    }
    window.addEventListener('scroll', scrollListener);
    return () => {window.removeEventListener('scroll', scrollListener);}
  }, []);



  return (
    <div className="page">
      <Header black={blackHeader}/>
      {featuredData && 
        <FeaturedMovie item={featuredData}/>
      }
      
      <section className="lists">
        {movieList.map((item) => (
          <MovieRow key={item.id} title={t(item.title)} items={item.items}/>
        ))}
      </section>
      <footer>
        <div className="footer--infos">
          {t("Made by")} <a href="https://github.com/avillanova" target="_blank">avillanova</a> {t("to more details")} <a href="" target='_blank'>README</a>
	        <div>{t("image rights for Netflix")}</div>
	        {t("data generated by")} <a href="https://www.themovieService.org/" target="_blank" rel="noopener noreferrer">The Movie DB</a>
        </div>
        <div className="footer--language-switch">
          <select value={language} onChange={handleLanguageChange}>
            {languages.map((option) => (
              <option key={option.value} value={option.value}>{option.label}</option>
            ))}
          </select>
        </div>
		</footer>
      {movieList.length <= 0 &&
        <div className='loading'>
          <img src={loading} alt={t("loading")} />
        </div>
      }
    </div>
  );
}

//TODO: Testes unitarios
//TODO: Organizar pastas dos componentes
//TODO: README
//TODO: Deploy